package de.persosim.simulator.secstatus;

import java.security.KeyPair;
import java.util.Arrays;

import de.persosim.simulator.cardobjects.PasswordAuthObject;
import de.persosim.simulator.protocols.Oid;
import de.persosim.simulator.protocols.pace.PaceOid;
import de.persosim.simulator.protocols.ta.TaOid;

/**
 * This {@link SecMechanism} implements the information store for security state
 * information generated by executions of the PACE protocol.
 * 
 * @author mboonk
 * 
 */
public class PaceMechanism extends AbstractSecMechanism {
	
	private PaceOid paceOid;
	private PasswordAuthObject usedPassword;
	private byte [] compressedEphemeralPublicKeyChip;
	private byte [] compressedEphemeralPublicKeyTerminal;
	private Oid oidForTa;
	private KeyPair ephemeralKeyPairChip;

	
	public PaceMechanism(PaceOid paceOid, PasswordAuthObject usedPassword, KeyPair ephemeralKeyPairChip, byte[] compressedEphemeralPublicKeyChip, byte[] compressedEphemeralPublicKeyTerminal, Oid terminalTypeOid){
		this.paceOid = paceOid;
		this.usedPassword = usedPassword;
		this.compressedEphemeralPublicKeyChip = compressedEphemeralPublicKeyChip;
		this.ephemeralKeyPairChip = ephemeralKeyPairChip;
		this.compressedEphemeralPublicKeyTerminal = compressedEphemeralPublicKeyTerminal;
		this.oidForTa = terminalTypeOid;
	}
	
	/**
	 * @return the OID, that was used to execute PACE
	 */
	public PaceOid getPaceOid() {
		return paceOid;
	}
	
	/**
	 * @return the password, that was used to execute PACE
	 */
	public PasswordAuthObject getUsedPassword() {
		return usedPassword;
	}

	/**
	 * @return the compressed ephemeral public key of the chip generated while performing PACE
	 */
	public byte [] getCompressedEphemeralPublicKeyChip() {
		return Arrays.copyOf(compressedEphemeralPublicKeyChip, compressedEphemeralPublicKeyChip.length);
	}

	/**
	 * @return the ephemeral key pair of the chip generated while performing PACE
	 */
	public KeyPair getEphemeralPublicKeyPairChip() {
		return ephemeralKeyPairChip;
	}
	
	/**
	 * @return the {@link TaOid} identifying the terminal type
	 */
	public Oid getOidForTa() {
		return oidForTa;
	}
	
	/**
	 * @return the compressed ephemeral public Key of the terminal conveyed while performing PACE
	 */
	public byte[] getCompressedEphemeralPublicKeyTerminal() {
		return compressedEphemeralPublicKeyTerminal;
	}

}
